#!/usr/bin/env bash

info='\e[1;36m'
warn='\e[1;33m'
error='\e[31m'

rootfs="minirootfs"
sourcefile=".sourcefile"
netsourcefile=".netsourcefile"
mountpoint="/var/lib/jkrun"
cuid=$((1000 + $RANDOM % 9000))
isnewcontainer="true"
dosetupnetwork="false"

function jkpremsg() { printf "\e[0;36m|jkrun-> ${info}"; }

function jkmsg() {
    jkpremsg; for i in {1..12}; do printf ' '; done
}

function permissionCheck() {
    if [[ $(id -u) != 0 ]]; then 
        jkpremsg; printf "${warn}permission denied, are you root?\n" 
        exit 1 
    fi
}

argflag=""
argarray=()
argspassedarray=($*)
cmdargs=()
for arg in $*; do
    if [[ "${arg:0:1}" == "-" ]]; then
        for (( i=1; i < ${#arg}; i++ )); do
            flag=${arg:$i:1}
            case "${flag}" in
                r)
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        if (( $# >= 3 )); then
                            pathtoimgtar="${argspassedarray[1]}"
                            cmdtoexec="${argspassedarray[2]}"
                            for (( a=3; a < $#; a++ )); do
                                cmdargs+=("${argspassedarray[$a]}")
                            done
                            argflag="${flag}"
                        else
                            jkpremsg; printf "${warn}the '-${flag}' flag requires 2 args\n"
                            jkpremsg; printf "${warn}Ex. sudo jkrun -r path/to/tar /bin/sh"
                            exit 1
                        fi
                    else
                        jkpremsg; printf "${warn}the '-${flag}' must be passed as the first arg"
                        jkpremsg; printf "${warn}Ex. sudo jkrun -r path/to/tar /bin/sh"
                        exit 1
                    fi
                ;;
                l)
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        jkpremsg; echo "Containers:"
                        containers=$(ls -l ${mountpoint} | grep -Po "[0-9]{4,5}$")
                        for container in ${containers}; do jkmsg; echo "${container}"; done
                        exit 0
                    fi
                ;;
                d)
                    permissionCheck
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        if (( ${#argspassedarray[@]} >= 2 )); then
                            for (( d=1; d < $#; d++ )); do
                                requestedcuid=$(ls ${mountpoint} | grep "^${argspassedarray[$d]}$")
                                if [[ "${requestedcuid}" != "" ]]; then
                                    cuid=${requestedcuid}
                                    ismounted=$(mount | grep /var/lib/jkrun/${cuid}/overlay)
                                    if [[ "${ismounted}" != "" ]]; then
                                        umount /var/lib/jkrun/${cuid}/overlay
                                    fi
                                    rm -rf "${mountpoint}/${cuid}"
                                    jkpremsg; printf "${info}deleted container \"${cuid}\"\n"
                                else
                                    jkpremsg; printf "${warn}not found: unable to find container '\"${argspassedarray[$d]}\"'\n"
                                fi
                            done
                            exit 0
                        else
                            jkpremsg; printf "${warn}the '-${flag}' flag requires at least 1 arg\n"
                            jkpremsg; printf "${warn}Ex. jkrun -d 1234 5678"
                            exit 1    
                        fi
                    else
                        jkpremsg; printf "${warn}the '-${flag}' must be passed as the first arg"
                        jkpremsg; printf "${warn}Ex. sudo jkrun -r path/to/tar /bin/sh"
                        exit 1
                    fi
                ;;
                D)
                    permissionCheck
                    for jkcuid in $(ls ${mountpoint}); do
                        ismounted=$(mount | grep /var/lib/jkrun/${jkcuid}/overlay)
                        if [[ "${ismounted}" != "" ]]; then
                            umount /var/lib/jkrun/${jkcuid}/overlay
                        fi
                        rm -rf "${mountpoint}/${jkcuid}"
                        jkpremsg; printf "${info}deleted container \"${jkcuid}\"\n"
                    done
                    exit 0
                ;;
                n)
                    dosetupnetwork="true"
                ;;
                s)
                    permissionCheck
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        if (( ${#argspassedarray[@]} >= 3 )); then
                            requestedcuid=$(ls ${mountpoint} | grep "^${argspassedarray[1]}$")
                            if [[ "${requestedcuid}" != "" ]]; then
                                cmdtoexec="${argspassedarray[2]}"
                                for (( s=3; s < $#; s++ )); do
                                    cmdargs+=("${argspassedarray[$s]}")
                                done
                                argflag="${flag}"
                                cuid=${requestedcuid}
                                isnewcontainer="false"
                                jkpremsg; printf "${info}starting container \"${cuid}\"\n"
                            else
                                jkpremsg; printf "${warn}not found: unable to find container \"${argspassedarray[1]}\"\n"
                                exit 1
                            fi
                        else
                            jkpremsg; printf "${warn}the '-${flag}' flag requires more than 1 arg\n"
                            jkpremsg; printf "${warn}Ex. sudo jkrun -s 1234 /bin/sh\n"
                            exit 1 
                        fi
                    else
                        jkpremsg; printf "${warn}the '-${flag}' must be passed as the first arg\n"
                        jkpremsg; printf "${warn}Ex. sudo jkrun -s 1234 /bin/sh\n"
                        exit 1
                    fi
                ;;
                *) ;;
            esac
        done
    elif [[ "${arg}" == "${argspassedarray[0]}" ]]; then
        jkpremsg; printf "${warn}usage: jkrun [-lD][-sdr] i.e. sudo jkrun -r path/to/tar cmd\n"
        exit 1        
    fi
done

conoverlayfs="${mountpoint}/${cuid}"
basedir="${conoverlayfs}/base"
overlaydir="${conoverlayfs}/overlay"
diffdir="${conoverlayfs}/diff"
workdir="${conoverlayfs}/work" 

function setupoverlayfs() {
    if [[ ! -d "${mountpoint}" ]]; then mkdir "${mountpoint}"; fi
    if [[ ! -d "${conoverlayfs}" ]]; then 
        mkdir -m 700 "${conoverlayfs}"
        mkdir "${basedir}" \
            "${diffdir}" \
            "${overlaydir}" \
            "${workdir}" 
    else 
        jkpremsg; printf "${warn}Whoops that cuid already exists, try again.\n"
        exit 0
    fi

    tar -xf "${pathtoimgtar}" --directory "${basedir}"
    mount -t overlay -o lowerdir="${basedir}",upperdir="${diffdir}",workdir="${workdir}" jkoverlay "${overlaydir}"
}

function hostpid() {
    conpids=()
    perentpid=($(ps ajf | grep -E "unshare.*/${cuid}/" | grep -v "grep" | grep -Po "^\s+[0-9]{1,6}\s+\K[0-9]{1,6}"))
    if [[ "${perentpid[@]}" != "" ]]; then
        for pid in "${perentpid[@]}"; do
            conpid=$(pgrep -P "${pid}")
            if [[ "${conpid}" != "" && -d "${mountpoint}/${cuid}" ]]; then
                conpids+=("${conpid}")
            fi
        done
        echo "${conpids[@]}"
    else
        echo "none"
    fi
}

########## Setup basic networking ##########
##### `-n` flag set  #####

function networksetupcheck() {
    if [[ -v ${hostvenum} || -v ${convenum} ]]; then 
        jkpremsg; printf "${info}Unable to setup network virtual ethernet\n" 
    fi
}

function setnetworkvars() {
    if [[ $(ip a | grep -E "^[0-9]{1,3}:\sve") ]]; then
        for i in $(seq 2 2 100); do
            if [[ ! $(ip a | grep -E "^[0-9]{1,3}:\sve${i}") ]]; then 
                hostvenum=${i}
                break
            fi
        done
    else
        hostvenum=2
    fi
    newhostve="ve${hostvenum}"
    convenum=$((hostvenum-1))
    newconve="ve${convenum}"
    hostveip="192.168.${convenum}.200"
    conveip="192.168.${convenum}.100"

    networksetupcheck

    jkpremsg; echo "Host IP: ${hostveip}"
    jkpremsg; echo "Container IP: ${conveip}"
}

# run in background
function setupnetwork() {
    conpid=($(hostpid))
    if [[ "${conpid[@]}" != "none" && "${conpid[@]}" != "" ]]; then
        networksetupcheck
        sleep 0.1 
        ip link add "${newconve}" netns ${conpid} type veth peer name "${newhostve}" netns 1
        ip link set "${newhostve}" up
        ip addr add ${hostveip}/24 dev "${newhostve}"
    else
        jkpremsg; printf "${warn}Whoops an error occured during network setup.\n"
        jkpremsg; printf "${warn}Unable to setup network.\n"
    fi
    
}

######################
### HOST
# ip link add ve1 netns 28966 type veth peer name ve2 netns 1
# ip link set ve2 up
# ip addr add 192.168.1.200/24 dev ve2
### CONTAINER
# ip link set ve1 up
# ip addr add 192.168.1.100/24 dev ve1
# ping 192.168.1.200
######################
############# End network setup ############

jkpremsg; echo "${cuid}"

if [[ "${isnewcontainer}" == "true" ]]; then
    setupoverlayfs
fi

trap "jkpremsg; echo 'Thanks, come again!'" EXIT

# overwrite source file if already exists or create if not
echo "#!/usr/bin/env sh" > "${overlaydir}/${sourcefile}"
echo "#!/usr/bin/env sh" > "${overlaydir}/${netsourcefile}"

# make sourcefiles executable
chmod +x "${overlaydir}/${sourcefile}"
chmod +x "${overlaydir}/${netsourcefile}"

function addcgrouppid() {
    if [[ "$1" != "" ]]; then
        currentwd=$(pwd)
        cd /sys/fs/cgroup/
        echo "$1" | tee \
            memory/jkrun/${cuid}/cgroup.procs \
            blkio/jkrun/${cuid}/cgroup.procs \
            cpu,cpuacct/jkrun/${cuid}/cgroup.procs \
            devices/jkrun/${cuid}/cgroup.procs \
            freezer/jkrun/${cuid}/cgroup.procs \
            hugetlb/jkrun/${cuid}/cgroup.procs \
            misc/jkrun/${cuid}/cgroup.procs \
            net_cls,net_prio/jkrun/${cuid}/cgroup.procs \
            perf_event/jkrun/${cuid}/cgroup.procs \
            pids/jkrun/${cuid}/cgroup.procs \
            rdma/jkrun/${cuid}/cgroup.procs \
            systemd/jkrun/${cuid}/cgroup.procs \
            >/dev/null
        cd "${currentwd}"
    else
        jkpremsg; printf "${warn}Whoops an error occured during cgroup setup (CG9463736)\n"
        jkpremsg; printf "${warn}Unable to setup cgroups\n"
    fi
}

# run in background
function setupcgroups() {
    # need time for container pid to show up on host 
    sleep 0.1
    hostpid=($(hostpid))
    if [[ ! -d /sys/fs/cgroup/memory/jkrun/${cuid} && "${hostpid[@]}" != "none" && "${hostpid[@]}" != "" ]]; then
        mkdir -pm 600 /sys/fs/cgroup/memory/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/blkio/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/pids/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/rdma/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/freezer/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/devices/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/cpuset/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/cpu,cpuacct/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/hugetlb/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/misc/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/net_cls,net_prio/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/perf_event/jkrun/${cuid}
        mkdir -pm 600 /sys/fs/cgroup/systemd/jkrun/${cuid}
        
        echo 1000000000 > /sys/fs/cgroup/memory/jkrun/${cuid}/memory.limit_in_bytes
        echo 100 > /sys/fs/cgroup/pids/jkrun/${cuid}/pids.max

        addcgrouppid "${hostpid}"

    elif [[ -d /sys/fs/cgroup/memory/jkrun/${cuid} && "${hostpid[@]}" != "none" && "${hostpid[@]}" != "" ]]; then
        for hpid in "${hostpid[@]}"; do
            pidincgroup=$(cat /sys/fs/cgroup/memory/jkrun/${cuid}/cgroup.procs | grep "${hpid}")
            if [[ "${pidincgroup}" == "" ]]; then
                addcgrouppid "${hpid}"
            fi
        done
    else
        jkpremsg; printf "${warn}Whoops an error occured during cgroup setup (CG9484748)\n"
        jkpremsg; printf "${warn}Unable to setup cgroups\n"
    fi
}

# commands to execute inside containerized process
cmds=(\
    "mount -t proc proc /proc" \
    "############## Begin Setup Devices ##############" \
    "mount -t tmpfs -o nosuid,size=65536k,mode=755 dev_tmpfs /dev" \
    "mknod /dev/console c 136 0 -m 620" \
    "chgrp tty /dev/console" \
    "mknod /dev/tty c 5 0 -m 666" \
    "ln -s /proc/self/fd/2 /dev/stderr" \
    "ln -s /proc/self/fd/0 /dev/stdin" \
    "ln -s /proc/self/fd/1 /dev/stdout" \
    "ln -s /proc/kcore /dev/core" \
    "ln -s /proc/self/fd /dev/fd" \
    "mkdir /dev/pts" \
    "mount -t devpts -o ptmxmode=666 devpts /dev/pts"
    "ln -s /dev/pts/ptmx /dev/ptmx"
    "mkdir /dev/mqueue && chmod +xt /dev/mqueue" \
    "mount -t mqueue -o nosuid,nodev,noexec,relatime mqueue /dev/mqueue" \
    "mkdir /dev/shm && chmod +xt /dev/shm" \
    "mount -t tmpfs shm_tmpfs /dev/shm" \
    "mknod /dev/null c 1 3 -m 666" \
    "mknod /dev/zero c 1 5 -m 666" \
    "mknod /dev/full c 1 7 -m 666" \
    "mknod /dev/random c 1 8 -m 666" \
    "mknod /dev/urandom c 1 9 -m 666" \
    "############## End Setup Devices ##############" \
    "mount -t sysfs sysfs /sys" \
    "hostname jkrun" \
    "sleep 0.2" \
)

# dynamically write commands to sourcefile
for cmd in "${cmds[@]}"; do
    echo "$cmd" >> "${overlaydir}/${sourcefile}"
done

# if -n flag is set run virtual ethernet setup container-side
if [[ "${dosetupnetwork}" == "true" ]]; then
    if [[ "${isnewcontainer}" == "true" ]]; then
        setnetworkvars
        netcmds=(\
            "ip link set ${newconve} up" \
            "ip addr add ${conveip}/24 dev ${newconve} &>/dev/null" \
        )

        for netcmd in "${netcmds[@]}"; do
            echo "$netcmd" >> "${overlaydir}/${netsourcefile}"
        done
        setupnetwork &
    else
        jkpremsg; printf "${warn}only one network setup per container allowed.\n"
        jkpremsg; printf "${warn}network setup must be done on initial run of container (with -r flag).\n"
    fi
fi

# run in background and wait for container pid on host
setupcgroups &

# containerize process with its own namespaces and change root filesystem
unshare \
    --uts \
    --pid --fork \
    --ipc \
    --mount \
    --net \
    --cgroup \
    chroot "${overlaydir}" \
    /bin/sh -c './'"${sourcefile}"';./'"${netsourcefile}"';printf "\e[0m"; exec '"${cmdtoexec} ${cmdargs[@]}"
