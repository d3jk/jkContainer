#!/usr/bin/env bash

info='\e[1;36m'
warn='\e[1;33m'
error='\e[31m'

rootfs="minirootfs"
sourcefile=".sourcefile"
netsourcefile=".netsourcefile"
mountpoint="/var/lib/jkrun"
cuid=$((1000 + $RANDOM % 9000))
isnewcontainer="true"
dosetupnetwork="false"

function jkpremsg() { printf "\e[0;36m|jkrun-> ${info}"; }

function jkmsg() {
    jkpremsg; for i in {1..12}; do printf ' '; done
}

function permissionCheck() {
    if [[ $(id -u) != 0 ]]; then 
        jkpremsg; printf "${warn}permission denied, are you root?\n" 
        exit 1 
    fi
}

argflag=""
argarray=()
argspassedarray=($*)
cmdargs=()
for arg in $*; do
    if [[ "${arg:0:1}" == "-" ]]; then
        for (( i=1; i < ${#arg}; i++ )); do
            flag=${arg:$i:1}
            case "${flag}" in
                r)
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        if (( $# >= 3 )); then
                            pathtoimgtar="${argspassedarray[1]}"
                            cmdtoexec="${argspassedarray[2]}"
                            for (( a=3; a < $#; a++ )); do
                                cmdargs+=("${argspassedarray[$a]}")
                            done
                            argflag="${flag}"
                        else
                            jkpremsg; printf "${warn}the '-${flag}' flag requires 2 args\n"
                            jkpremsg; printf "${warn}Ex. sudo jkrun -r path/to/tar /bin/sh"
                            exit 1
                        fi
                    else
                        jkpremsg; printf "${warn}the '-${flag}' must be passed as the first arg"
                        jkpremsg; printf "${warn}Ex. sudo jkrun -r path/to/tar /bin/sh"
                        exit 1
                    fi
                ;;
                l)
                    jkpremsg; echo "Containers:"
                    containers=$(ls -l ${mountpoint} | grep -Po "[0-9]{4,5}$")
                    for container in ${containers}; do jkmsg; echo "${container}"; done
                    exit 0
                ;;
                d)
                    permissionCheck
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        if (( ${#argspassedarray[@]} >= 2 )); then
                            for (( d=1; d < $#; d++ )); do
                                requestedcuid=$(ls ${mountpoint} | grep "^${argspassedarray[$d]}$")
                                if [[ "${requestedcuid}" != "" ]]; then
                                    cuid=${requestedcuid}
                                    ismounted=$(mount | grep /var/lib/jkrun/${cuid}/overlay)
                                    if [[ "${ismounted}" != "" ]]; then
                                        umount /var/lib/jkrun/${cuid}/overlay
                                    fi
                                    rm -rf "${mountpoint}/${cuid}"
                                    jkpremsg; printf "${info}deleted container \"${cuid}\"\n"
                                else
                                    jkpremsg; printf "${warn}not found: unable to find container '\"${requestedcuid}\"'\n"
                                fi
                            done
                            exit 0
                        else
                            jkpremsg; printf "${warn}the '-${flag}' flag requires at least 1 arg\n"
                            jkpremsg; printf "${warn}Ex. jkrun -d 1234 5678"
                            exit 1    
                        fi
                    else
                        jkpremsg; printf "${warn}the '-${flag}' must be passed as the first arg"
                        jkpremsg; printf "${warn}Ex. sudo jkrun -r path/to/tar /bin/sh"
                        exit 1
                    fi
                ;;
                D)
                    permissionCheck
                    for jkcuid in $(ls ${mountpoint}); do
                        ismounted=$(mount | grep /var/lib/jkrun/${jkcuid}/overlay)
                        if [[ "${ismounted}" != "" ]]; then
                            umount /var/lib/jkrun/${jkcuid}/overlay
                        fi
                        rm -rf "${mountpoint}/${jkcuid}"
                        jkpremsg; printf "${info}deleted container \"${jkcuid}\"\n"
                    done
                    exit 0
                ;;
                n)
                    dosetupnetwork="true"
                ;;
                s)
                    permissionCheck
                    if [[ "${arg}" == "${argspassedarray[0]}" ]]; then
                        if (( ${#argspassedarray[@]} >= 3 )); then
                            requestedcuid=$(ls ${mountpoint} | grep "^${argspassedarray[1]}$")
                            if [[ "${requestedcuid}" != "" ]]; then
                                cmdtoexec="${argspassedarray[2]}"
                                for (( s=3; s < $#; s++ )); do
                                    cmdargs+=("${argspassedarray[$s]}")
                                done
                                argflag="${flag}"
                                cuid=${requestedcuid}
                                isnewcontainer="false"
                                jkpremsg; printf "${info}starting container \"${cuid}\"\n"
                            else
                                jkpremsg; printf "${warn}not found: unable to find container \"${requestedcuid}\"\n"
                                exit 1
                            fi
                        else
                            jkpremsg; printf "${warn}the '-${flag}' flag requires exactly 1 arg\n"
                            jkpremsg; printf "${warn}Ex. sudo jkrun -s 1234"
                            exit 1 
                        fi
                    else
                        jkpremsg; printf "${warn}the '-${flag}' must be passed as the first arg"
                        jkpremsg; printf "${warn}Ex. sudo jkrun -s 1234"
                        exit 1
                    fi
                ;;
                *) ;;
            esac
        done
    elif [[ "${arg}" == "${argspassedarray[0]}" ]]; then
        jkpremsg; printf "${warn}usage: jkrun [-lD][-sdr] i.e. sudo jkrun -r path/to/tar cmd\n"
        exit 1        
    fi
done

conoverlayfs="${mountpoint}/${cuid}"
basedir="${conoverlayfs}/base"
overlaydir="${conoverlayfs}/overlay"
diffdir="${conoverlayfs}/diff"
workdir="${conoverlayfs}/work" 

function setupoverlayfs() {
    if [[ ! -d "${mountpoint}" ]]; then mkdir "${mountpoint}"; fi
    if [[ ! -d "${conoverlayfs}" ]]; then 
        mkdir "${conoverlayfs}"
        chmod 700 "${conoverlayfs}"
        mkdir "${basedir}" \
            "${diffdir}" \
            "${overlaydir}" \
            "${workdir}" 
    else 
        jkpremsg; printf "${warn}Whoops that cuid already exists, try again.\n"
        exit 0
    fi

    tar -xf "${pathtoimgtar}" --directory "${basedir}"
    mount -t overlay -o lowerdir="${basedir}",upperdir="${diffdir}",workdir="${workdir}" jkoverlay "${overlaydir}"
}

########## Setup basic networking ##########
##### `-n` flag set  #####

function networksetupcheck() {
    if [[ -v ${hostvenum} || -v ${convenum} ]]; then 
        jkpremsg; printf "${info}Unable to setup network virtual ethernet\n" 
    fi
}

function setnetworkvars() {
    if [[ $(ip a | grep -E "^[0-9]{1,3}:\sve") ]]; then
        for i in $(seq 2 2 100); do
            if [[ ! $(ip a | grep -E "^[0-9]{1,3}:\sve${i}") ]]; then 
                hostvenum=${i}
                break
            fi
        done
    else
        hostvenum=2
    fi
    newhostve="ve${hostvenum}"
    convenum=$((hostvenum-1))
    newconve="ve${convenum}"
    hostveip="192.168.${convenum}.200"
    conveip="192.168.${convenum}.100"

    networksetupcheck

    jkpremsg; echo "Host IP: ${hostveip}"
    jkpremsg; echo "Container IP: ${conveip}"
}

function setupnetwork() {
    # run in background
    perentpid=$(ps ajf | grep -E "unshare.*/${cuid}/" | grep -v "grep" | grep -Po "^\s+[0-9]{1,6}\s+\K[0-9]{1,6}")
    conpid=$(pgrep -P "${perentpid}")
    networksetupcheck
    sleep 1 
    ip link add "${newconve}" netns ${conpid} type veth peer name "${newhostve}" netns 1
    ip link set "${newhostve}" up
    ip addr add ${hostveip}/24 dev "${newhostve}"
}

######################
### HOST
# ip link add ve1 netns 28966 type veth peer name ve2 netns 1
# ip link set ve2 up
# ip addr add 192.168.1.200/24 dev ve2
### CONT
# ip link set ve1 up
# ip addr add 192.168.1.100/24 dev ve1
# ping 192.168.1.200
######################
############# End network setup ############

jkpremsg; echo "${cuid}"

if [[ "${isnewcontainer}" == "true" ]]; then
    setupoverlayfs
fi

trap "jkpremsg; echo 'Thanks, come again!'" EXIT

# overwrite source file if already exists or create if not
echo "#!/usr/bin/env sh" > "${overlaydir}/${sourcefile}"
echo "#!/usr/bin/env sh" > "${overlaydir}/${netsourcefile}"

# make sourcefiles executable
chmod +x "${overlaydir}/${sourcefile}"
chmod +x "${overlaydir}/${netsourcefile}"

# commands to execute inside containerized process
cmds=(\
    "mount -t sysfs sysfs /sys" \
    "mount -t proc proc /proc" \
    "############## Begin Setup Cgroups ##############" \
    "mount -t tmpfs cgroup /sys/fs/cgroup" \
    "mkdir /sys/fs/cgroup/memory" \
    "mkdir /sys/fs/cgroup/blkio" \
    "mkdir /sys/fs/cgroup/pids" \
    "mkdir /sys/fs/cgroup/rdma" \
    "mkdir /sys/fs/cgroup/freezer" \
    "mkdir /sys/fs/cgroup/devices" \
    "mkdir /sys/fs/cgroup/cpuset" \
    "mkdir /sys/fs/cgroup/cpu,cpuacct" \
    "mkdir /sys/fs/cgroup/hugetlb" \
    "mkdir /sys/fs/cgroup/misc" \
    "mkdir /sys/fs/cgroup/net_cls,net_prio" \
    "mkdir /sys/fs/cgroup/perf_event" \
    "mkdir /sys/fs/cgroup/systemd" \
    "cd /sys/fs/cgroup" \
    "ln -s cpu,cpuacct cpu && ln -s cpu,cpuacct cpuacct" \
    "ln -s net_cls,net_prio net_cls && ln -s net_cls,net_prio net_prio" \
    "cd /" \
    "mount -t cgroup -o memory,nosuid,nodev,noexec cgroup /sys/fs/cgroup/memory/" \
    "mount -t cgroup -o blkio,nosuid,nodev,noexec cgroup /sys/fs/cgroup/blkio/" \
    "mount -t cgroup -o pids,nosuid,nodev,noexec cgroup /sys/fs/cgroup/pids/" \
    "mount -t cgroup -o rdma,nosuid,nodev,noexec cgroup /sys/fs/cgroup/rdma/" \
    "mount -t cgroup -o freezer,nosuid,nodev,noexec cgroup /sys/fs/cgroup/freezer/" \
    "mount -t cgroup -o devices,nosuid,nodev,noexec cgroup /sys/fs/cgroup/devices/" \
    "mount -t cgroup -o cpuset,nosuid,nodev,noexec cgroup /sys/fs/cgroup/cpuset/" \
    "mount -t cgroup -o cpu,cpuacct,nosuid,nodev,noexec cgroup /sys/fs/cgroup/cpu,cpuacct/" \
    "mount -t cgroup -o hugetlb,nosuid,nodev,noexec cgroup /sys/fs/cgroup/hugetlb/" \
    "mount -t cgroup -o misc,nosuid,nodev,noexec cgroup /sys/fs/cgroup/misc/" \
    "mount -t cgroup -o net_cls,net_prio,nosuid,nodev,noexec cgroup /sys/fs/cgroup/net_cls,net_prio/" \
    "mount -t cgroup -o perf_event,nosuid,nodev,noexec cgroup /sys/fs/cgroup/perf_event/" \
    "mount -t cgroup -o name=systemd,nosuid,nodev,noexec,xattr cgroup /sys/fs/cgroup/systemd/" \
    "echo 1 > /sys/fs/cgroup/cpuset/cgroup.clone_children" \
    "if [ ! -d /sys/fs/cgroup/memory/jkrun ]; then mkdir /sys/fs/cgroup/memory/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/blkio/jkrun ]; then mkdir /sys/fs/cgroup/blkio/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/pids/jkrun ]; then mkdir /sys/fs/cgroup/pids/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/rdma/jkrun ]; then mkdir /sys/fs/cgroup/rdma/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/freezer/jkrun ]; then mkdir /sys/fs/cgroup/freezer/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/devices/jkrun ]; then mkdir /sys/fs/cgroup/devices/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/cpuset/jkrun ]; then mkdir /sys/fs/cgroup/cpuset/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/cpu,cpuacct/jkrun ]; then mkdir /sys/fs/cgroup/cpu,cpuacct/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/hugetlb/jkrun ]; then mkdir /sys/fs/cgroup/hugetlb/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/misc/jkrun ]; then mkdir /sys/fs/cgroup/misc/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/net_cls,net_prio/jkrun ]; then mkdir /sys/fs/cgroup/net_cls,net_prio/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/perf_event/jkrun ]; then mkdir /sys/fs/cgroup/perf_event/jkrun; fi" \
    "if [ ! -d /sys/fs/cgroup/systemd/jkrun ]; then mkdir /sys/fs/cgroup/systemd/jkrun; fi" \
    "cd /sys/fs/cgroup" \
    "echo 1 | tee memory/jkrun/cgroup.procs blkio/jkrun/cgroup.procs cpu,cpuacct/jkrun/cgroup.procs devices/jkrun/cgroup.procs freezer/jkrun/cgroup.procs hugetlb/jkrun/cgroup.procs misc/jkrun/cgroup.procs net_cls,net_prio/jkrun/cgroup.procs perf_event/jkrun/cgroup.procs pids/jkrun/cgroup.procs rdma/jkrun/cgroup.procs > systemd/jkrun/cgroup.procs" \
    "echo 1000000000 > memory/jkrun/memory.limit_in_bytes" \
    "echo 100 > pids/jkrun/pids.max" \
    "cd /" \
    "############## End Setup Cgroups ##############" \
    "############## Begin Setup Devices ##############" \
    "# mount -t devtmpfs -o nosuid,noexec,relatime,size=1957816k,nr_inodes=489454,mode=755 udev /dev" \
    "# rm -rf /dev/dri /dev/disk /dev/bsg /dev/block /dev/input /dev/bus /dev/lightnvm" \
    "# find /dev -type f -regex '/dev/[^cfmnprstuz][a-z]+' -delete" \
    "# find /dev -regex '/dev/tty[S]?[0-9]+' -delete" \
    "# mount -t tmpfs dev_tmpfs /dev" \
    "# ln -s /proc/self/fd/2 /dev/stderr" \
    "# ln -s /proc/self/fd/0 /dev/stdin" \
    "# ln -s /proc/self/fd/1 /dev/stdout" \
    "# ln -s /proc/kcore /dev/core" \
    "# ln -s /proc/self/fd /dev/fd" \
    "# mkdir /dev/pts" \
    "# mount -t devpts -o ptmxmode=666 devpts /dev/pts"
    "# ln -s /dev/pts/ptmx /dev/ptmx"
    "# mkdir /dev/mqueue && chmod +xt /dev/mqueue" \
    "# mount -t mqueue -o nosuid,nodev,noexec,relatime mqueue /dev/mqueue" \
    "# mkdir /dev/shm && chmod +xt /dev/shm" \
    "# mount -t tmpfs shm_tmpfs /dev/shm" \
    "# mknod /dev/null c 1 3 -m 666" \
    "############## End Setup Devices ##############" \
    "hostname jkrun" \
)
# /dev/ptmx

# Lunux required device files...
# full, null, random, tty, urandom, zero

# udev on /dev/null type devtmpfs (rw,nosuid,noexec,relatime,size=1957816k,nr_inodes=489454,mode=755,inode64)
# udev on /dev/tty type devtmpfs (rw,nosuid,noexec,relatime,size=1957816k,nr_inodes=489454,mode=755,inode64)

for cmd in "${cmds[@]}"; do
    echo "$cmd" >> "${overlaydir}/${sourcefile}"
done

if [[ "${dosetupnetwork}" == "true" ]]; then
    setnetworkvars
    netcmds=(\
        "sleep 2"
        "ip link set ${newconve} up" \
        "ip addr add ${conveip}/24 dev ${newconve} &>/dev/null" \
    )

    for netcmd in "${netcmds[@]}"; do
        echo "$netcmd" >> "${overlaydir}/${netsourcefile}"
    done
    setupnetwork &
fi

unshare \
    --uts \
    --pid --fork \
    --ipc \
    --mount \
    --net \
    --cgroup \
    chroot "${overlaydir}" /bin/sh -c './'"${sourcefile}"';./'"${netsourcefile}"';printf "\e[0m"; exec '"${cmdtoexec} ${cmdargs[@]}"
